#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Aug 19 13:09:40 2020

@author: toyosibamidele
"""

import pandas as pd 
import matplotlib.pyplot as plt 
import statsmodels.api as sm 
from tabulate import tabulate 

myData = pd.read_csv('Titanic_survival.csv')

Titanic = pd.DataFrame(myData)

print(Titanic.info())

Titanic2 = Titanic.copy()

titanic = Titanic2.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis = 1)

print("\n"," New Titanic Data Frame - dropped columns- PassengerId, Name, Ticket, Cabin")
col_list = titanic.columns.tolist()
print (tabulate(titanic.head(),headers = col_list, tablefmt ='psql'))

print( "\n"," New Titanic Data Frame, female:0, male:1")
titanic['Sex']=titanic['Sex'].map({'female':0,'male':1})
print (tabulate(titanic.head(),headers = col_list, tablefmt ='psql'))

print( "\n"," New Titanic Data Frame - dropped columns except survival, pClass, and gender to explore their relationship")
titanic2 = titanic.drop(['Age', 'SibSp', 'Parch', 'Fare', 'Embarked'], axis = 1) 
col_list = titanic2.columns.tolist()
print (tabulate(titanic2.head(),headers = col_list, tablefmt ='psql'))
print (tabulate(titanic2.describe(),headers = col_list, tablefmt ='psql'))

#"Group data by survival"
survival_info = titanic2.groupby(by = "Survived")
survived_yes = survival_info.get_group(1)
survived_no = survival_info.get_group(0)

#Group survival data by Pclass and count
pclass_survived_yes = survived_yes["Pclass"].value_counts().to_dict()
pclass_survived_no = survived_no["Pclass"].value_counts().to_dict()
print( "\n","Create a dataframe of P class survival data")
yes = pd.DataFrame(pclass_survived_yes,index=['Survived'])
no = pd.DataFrame(pclass_survived_no, index=['Dead'])
pclass_check = pd.concat([yes,no])
class_list = ["1st class","2nd class", "3rd class"]
print (tabulate(pclass_check,headers = class_list, tablefmt ='psql'))


print( "\n","Plot Pclass survival data ")
colors =["g","r", "b"]
fig , ax = plt.subplots()
pclass_check.plot(kind ="bar", color = colors, ax = ax)
positions = (0, 1)
labels = ("Survived", "Dead")
plt.xlabel ("Survival category ", fontsize=12, fontweight='bold')
plt.ylabel ("Survival count ",fontsize=12, fontweight='bold')
plt.title("Pclass - Survival Count per Pclass",fontsize=14, fontweight='bold')
plt.xticks(positions, labels,rotation='horizontal')
ax.legend(["1st class", "2nd class", "3rd class"])
plt.show()


#Group survival data by Sex and count"
sex_survived_yes = survived_yes["Sex"].value_counts().to_dict()
sex_survived_no = survived_no["Sex"].value_counts().to_dict()
print( "\n","Create a dataframe of Gender survival data")
s_yes = pd.DataFrame(sex_survived_yes, index=['Survived'])
s_no = pd.DataFrame(sex_survived_no, index=['Dead'])
s_check = pd.concat([s_yes,s_no])
gender_list =  ["Female", "Male"]
print (tabulate(s_check,headers = gender_list, tablefmt ='psql'))

print( "\n","Plot Gender survival dataa")
colors =["g","r"]
fig , ax = plt.subplots()
s_check.plot(kind ="bar", color = colors, ax = ax)
positions = (0, 1)
labels = ("Survived", "Dead")
plt.xlabel ("Survival category ", fontsize=12, fontweight='bold')
plt.ylabel ("Survival count ",fontsize=12, fontweight='bold')
plt.title("Sex - Survival Count by Gender",fontsize=14, fontweight='bold')
plt.xticks(positions, labels,rotation='horizontal')
ax.legend(["Female", "Male"])
plt.show()

fig = plt.figure()
fig.subplots_adjust(right=1.5)
ax1 = fig.add_subplot(121)
colors =["g","r", "b"]
pclass_check.plot(kind ="bar", color = colors, ax = ax1)
ax1.legend(["1st class", "2nd class", "3rd class"])
plt.xlabel ("Survival category ", fontsize=12, fontweight='bold')
plt.ylabel ("Survival count ",fontsize=12, fontweight='bold')
plt.xticks(positions, labels,rotation='horizontal')
plt.title("Pclass - Survival Count per Pclass",fontsize=14, fontweight='bold')

print( "\n","Side by side plot")
print("Survival count per Pclass")
print("Overall in the survived category, 1st class passengers survived the highest number at 136 compared to 2nd class and 3rd class passengers")
print("The bar plot also shows that 3rd class passengers survived more than 2nd class passengers")
print("but this can be attributed to the fact that the most passengers are in 3rd class")
print("For passengers that didnt survive, the death count is highest on 3rd class")
print("\n")
print("Survival count per Gender")
print("For passengers that didnt survive, the death count is highest on 3rd class")
print("The bar plot clearly shows taht more females suvived than men")


ax2 = fig.add_subplot(122)
s_check.plot(kind ="bar", color = colors, ax = ax2)
ax2.legend(["Female", "Male"])
plt.xlabel ("Survival category ", fontsize=12, fontweight='bold')
plt.xlabel ("Survival category ", fontsize=12, fontweight='bold')
plt.ylabel ("Survival count ",fontsize=12, fontweight='bold')
plt.xticks(positions, labels,rotation='horizontal')
plt.title("Sex - Survival Count by Gender",fontsize= 14, fontweight='bold')
plt.show()



print( "\n"," Does Pclass and Sex strongly correlated to/ affect  Survival ?")
print( "\n"," Survival - dependent variable, Pclass and Sex are the independent variables ")
y = titanic2['Survived']
x1 = titanic2[['Pclass','Sex']] 

print( "\n"," Using the logistic regression  ")
x = sm.add_constant(x1)
results = sm.OLS(y,x).fit()
print(results.summary())
#print(results.predict())

print( "\n","With p values <0.05 on Pclass and Sex ")
print("This indicates that these two features are significant in determing survival during the Titanic incident ")

#sample prediction check 
new_data = pd.DataFrame({'const': 1,'Pclass': [3, 3], 'Sex': [0, 1]})
new_data = new_data[['const','Pclass','Sex']]
new_data = new_data.rename(index={ 0 : 'Passenger 1',1:'Passenger 2'})


predictions = results.predict(new_data)
print(predictions)

predictionsdf = pd.DataFrame({'Predictions':predictions})
joined = new_data.join(predictionsdf)
joined.rename(index={0: 'Passenger 1',1:'Passenger 2'})
print(joined)
